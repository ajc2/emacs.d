#+TITLE: Emacs Configuration
#+AUTHOR: answer

* Summary
Welcome to answer's special Emacs configuration! I will customize this however
I see fit to my advantage in the future. However, it is now a great step that
I have made the move over to a configuration written within org-mode so that
it is more organized.

[[./preview.png]]
* Packages
** Repositories
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)

  (setq package-archives '(("ELPA"  . "http://tromey.com/elpa/")
                           ("gnu"   . "http://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("org"   . "https://orgmode.org/elpa/")))
  (package-initialize)
#+END_SRC
** use-package
*** Installation
#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC
*** Enable ensuring of all packages listed to be automatically installed
Since repeating ~:ensure t~ is tiring, let's make doing that redundant.
#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC
*** Automatically update packages
#+BEGIN_SRC emacs-lisp
  (use-package auto-package-update
    :config
    (setq auto-package-update-delete-old-versions t)
    (setq auto-package-update-hide-results t)
    (auto-package-update-maybe))
#+END_SRC
* Visual
** Remove clutter from screen
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC
*** Remove annoying noises from doing anything out of line
I know this doesn't count as visual, but I really don't feel like making a seperate category for this
one thing.
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
** Font
DejaVu Sans Mono is a pretty reliable font that works for almost any situation
comfortably.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono-10"))
  (set-face-attribute 'default t :font "DejaVu Sans Mono-10")
  (set-face-attribute 'default nil :font "DejaVu Sans Mono-10")
  (set-frame-font "DejaVu Sans Mono-10" nil t)
#+END_SRC
** Theme
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :config (load-theme 'dracula t))
#+END_SRC
** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC
** Line numbers
This enables line numbers in all programming related modes.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+END_SRC
** Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :config (beacon-mode 1))
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :config
    (setq sml/theme 'respectful)
    (sml/setup))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
#+END_SRC
* Dashboard
** Page break lines
Needed to insert break lines so that ~^L~ isn't displayed instead.
#+BEGIN_SRC emacs-lisp
  (use-package page-break-lines)
#+END_SRC
** Dashboard setup
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :init 
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 5)
                            (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-startup-banner "~/.emacs.d/ralsei.png")
    (setq dashboard-set-footer nil)
    (setq dashboard-banner-logo-title "hewwo there OwO")
    (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))))
#+END_SRC
* Autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :config (ac-config-default))
#+END_SRC
* Powerthesaurus
Thesaurus integration for Emacs.
#+BEGIN_SRC emacs-lisp
(use-package powerthesaurus)
#+END_SRC
* NeoTree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :config (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    :bind ([f8] . neotree-toggle))
#+END_SRC
* IDO

* popup-kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* which-key
When we start a key macro, this helps gives us suggestions for what we
can do in case we forgot what we were going to do.
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config (which-key-mode))
#+END_SRC
* Org
** HTML-ize
Allow for the exporting of org-mode files in HTML in Windows.
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC
** indent-mode
#+BEGIN_SRC emacs-lisp
(setq org-startup-indent t)
#+END_SRC
** Line wrapping
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
              '(lambda ()
                 (visual-line-mode 1)))
#+END_SRC
